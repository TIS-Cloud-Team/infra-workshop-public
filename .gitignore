# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# for ansible projects
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# Virtual environments
venv/
.env/
.env.*

# Ansible-specific files
# Vault password files
*.vault
*.vault.yml
*.vault.yaml

# Inventory files with sensitive information
inventory/*secret*
inventory/*_secret*
inventory/secrets/

# Role dependencies and caches
.roles/
.ansible/

# Temporary files
*.retry
*.log

# OS-specific files
.DS_Store
Thumbs.db

# IDE and editor directories
.vscode/
.idea/
*.sublime-project
*.sublime-workspace

# Backup and temporary files
*~
*.bak
*.tmp
*.swp

# Docker-related files
docker-compose.override.yml
Dockerfile.local

# Jenkins or CI/CD related files
ci/
jenkins/

# Sensitive configuration files
config/secrets.yml
config/credentials.yml


## don't checkin any credentials or environment specific files
.env
**/.env
.ssh
**/.ssh
password.txt
**/password.txt
*.tmp
*.temp
.bash_history
**/.bash_history
tmp/
temp/
**/tmp/
**/temp/



